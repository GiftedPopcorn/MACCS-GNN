import numpy as np
import pandas as pd
import torch
from rdkit import Chem
from rdkit.Chem.BRICS import FindBRICSBonds

import csv

from rdkit.Chem.Draw import rdMolDraw2D
from IPython.display import SVG

import matplotlib.pyplot as plt
import matplotlib.cm as cm
import matplotlib

#----------------------------------------
#Loading the dataset
#----------------------------------------
def get_header(path):
    with open(path) as f:
        header = next(csv.reader(f))

    return header

def get_task_names(path, use_compound_names=False):
    index = 2 if use_compound_names else 1
    task_names = get_header(path)[index:]

    return task_names

task_names = get_task_names('E:/3-Code/Jupternote book/HiGNN_clintox/raw/clintox.csv')

#----------------------------------------
#Model output
#----------------------------------------
output = (torch.tensor([[  8.6670,  -8.8428, -14.9471,  17.4461],
        [ 17.1000, -17.6108, -26.5008,  30.7635],
        [ 18.7819, -19.4575, -22.1404,  25.5585],
        [ 10.7712, -11.0332, -12.7907,  15.0894],
        [  4.6816,  -4.7977,  -7.8873,   9.3719],
        [ 37.5183, -37.4192, -47.1656,  55.2707],
        [ 11.8371, -11.8558, -16.9910,  20.0047],
        [-37.4145,  32.7406,  21.7027, -17.1913],
        [ 29.9440, -29.4467, -49.2646,  58.2259],
        [ 12.9088, -13.6120, -17.0776,  19.4946],
        [  5.2997,  -5.4773,  -8.0953,   9.7955],
        [ 10.0779, -10.5049, -14.7951,  17.6814],
        [  6.6701,  -6.8271,  -8.8524,  10.6982],
        [  6.5238,  -6.6670, -11.6080,  13.7117],
        [ 32.3682, -32.7940, -32.7171,  38.4217],
        [ 12.7073, -12.9359, -14.5492,  17.0491],
        [ 33.0912, -34.9945, -38.6416,  44.7829],
        [ 18.3362, -18.8811, -21.6413,  24.9668],
        [ 23.9476, -22.8188, -47.1179,  54.3807],
        [  6.5160,  -6.7006,  -9.0119,  10.4908],
        [ 19.3767, -19.9988, -22.6367,  26.5655],
        [ 16.6979, -17.0617, -21.4618,  24.8659],
        [  6.8528,  -6.8552, -10.2789,  11.9918],
        [ 18.1831, -18.3353, -20.7057,  24.4019],
        [ 11.1710, -11.4891, -13.7115,  16.3012],
        [  4.9886,  -5.8140,  -4.9469,   7.1302],
        [ 27.2234, -27.7937, -30.5511,  35.5153],
        [ 18.1523, -18.4640, -20.5878,  24.0528],
        [ 13.3607, -13.7486, -23.4904,  26.5816],
        [ 17.8153, -18.5324, -24.9945,  29.1403],
        [  8.2131,  -8.8415, -13.7573,  16.1044],
        [ -3.2976,   3.0674,   0.9044,   0.1839],
        [ 21.4271, -21.4417, -33.8132,  38.4211],
        [ 12.4673, -13.3628, -18.5068,  20.8169],
        [  9.7341,  -9.8734, -13.3795,  15.5646],
        [  9.3031,  -9.3621, -11.5933,  13.4063],
        [ 23.0349, -23.9704, -23.4180,  27.5531],
        [ 15.1724, -15.5192, -11.5662,  14.0191],
        [ 14.8004, -15.2286, -29.6853,  35.0912],
        [ 13.7617, -14.0660, -14.9418,  18.1234],
        [  6.1377,  -6.7622,  -4.0921,   4.6506],
        [  8.3080,  -8.3594, -13.9532,  15.3818],
        [ 22.1181, -22.1736, -24.1229,  27.6642],
        [ 13.4218, -13.5930, -18.6101,  21.9781],
        [ 10.1562, -10.4567, -21.2726,  25.2486],
        [ 12.8480, -13.7585, -16.2993,  17.8445],
        [  6.8829,  -7.3508,  -8.3140,   9.5837],
        [ 15.6147, -15.9408, -18.7257,  21.8922],
        [ 17.5850, -18.1154, -32.0109,  37.7683],
        [ 20.6465, -21.1947, -24.2298,  28.1028],
        [ 13.2027, -13.4877, -15.0421,  17.9656],
        [  6.5030,  -6.9796,  -8.2711,  10.4568],
        [ 12.5841, -13.4286, -18.6574,  21.6650],
        [ 10.7977, -11.1086, -20.2501,  23.6707],
        [ 10.6932, -10.7435, -21.1084,  25.0588],
        [ 21.1996, -21.5899, -22.8338,  26.4250],
        [ 22.8898, -23.0693, -25.3566,  29.6471],
        [ 15.1936, -16.8396, -18.8155,  21.7405],
        [ 24.8515, -25.1297, -27.5616,  32.3945],
        [-22.0321,  19.2927,  11.9233,  -9.5550],
        [  0.1238,  -0.1588,  -1.6840,   2.2855],
        [ 14.7909, -15.3533, -22.0341,  25.2200],
        [  4.4894,  -4.3510,  -7.6093,   8.1427],
        [ 11.4961, -12.1296, -14.2259,  16.3836],
        [ 32.2564, -33.3403, -37.7022,  43.8514],
        [ 12.3178, -12.4680, -18.0833,  21.1634],
        [  1.0681,  -1.1160,  -2.4005,   3.4022],
        [ 13.6312, -13.6400, -18.9961,  22.3169],
        [ 20.5407, -23.4966, -32.5226,  40.0924],
        [ 23.7127, -24.0650, -30.2374,  35.4941],
        [ -3.6373,   3.4196,   1.8853,  -1.0080],
        [  6.5781,  -7.0408,  -7.1263,   9.1063],
        [ 11.0004, -10.9690, -20.3609,  23.9328],
        [  7.0015,  -7.5219, -10.0997,  10.7697],
        [ 20.2473, -21.9280, -27.2206,  30.2663],
        [  9.6294, -10.2840, -16.4593,  18.9447],
        [ 13.2138, -13.2281, -21.2253,  24.8687],
        [ 12.3473, -13.1681, -21.1118,  24.5142],
        [ 18.3376, -19.3313, -25.3939,  28.6583],
        [  1.2445,  -1.3095,  -2.5701,   2.9566],
        [ 12.6322, -12.9259, -28.0848,  33.0756],
        [ 13.3570, -13.8037, -23.3761,  26.1899],
        [  5.3189,  -5.5513,  -7.3161,   8.9198],
        [  9.0128,  -9.3955, -10.7429,  12.5938],
        [ 12.4788, -12.9150, -25.7626,  30.7878],
        [ 15.0458, -16.7524, -23.0541,  26.9314],
        [ 13.0370, -13.3851, -18.6137,  21.3748],
        [ 60.6633, -61.6591, -80.0751,  91.9920],
        [  8.8731,  -8.8968, -11.0322,  13.0968],
        [ 11.5925, -11.8235, -15.0931,  17.8662],
        [  9.8134, -10.1971, -18.0778,  21.2600],
        [ 10.9653, -10.8567, -13.4436,  15.3524],
        [ 18.9280, -19.6395, -39.7996,  46.8652],
        [  1.7782,  -1.8978,  -3.2675,   3.6198],
        [  7.0330,  -7.0494, -10.4460,  12.3310],
        [ 12.8437, -12.7132, -14.3419,  16.4808],
        [ 11.0502, -11.5897, -13.6298,  15.6331],
        [ 13.9347, -14.3870, -26.0440,  31.1070],
        [ 16.2212, -16.7327, -20.3467,  23.4665],
        [ 26.6564, -27.1488, -25.9423,  30.2101],
        [ 21.9229, -22.1822, -23.1909,  27.4801],
        [ 13.8683, -14.4365, -25.4935,  30.3500],
        [ 12.0688, -12.5273, -14.8795,  17.0237],
        [ 16.9837, -17.7407, -19.8281,  23.4572],
        [  7.8205,  -8.8716, -11.8721,  12.5568],
        [ 16.1518, -16.1603, -16.9532,  20.0800],
        [ 19.2037, -19.2027, -25.2455,  29.2853],
        [  9.7302, -11.2148, -14.0414,  16.9273],
        [  4.2278,  -4.4275,  -7.8602,   9.3975],
        [  2.9161,  -2.6688,  -7.6042,   9.0430],
        [ 28.6471, -29.8440, -48.6671,  56.7881],
        [  7.5337,  -7.8924,  -9.5142,  10.3835],
        [  3.5525,  -3.7213,  -6.5186,   8.0112],
        [ 35.0028, -36.7565, -36.3740,  41.9932],
        [ 16.1180, -16.9247, -18.5956,  21.4098],
        [ 13.8963, -14.1281, -30.8235,  36.0085],
        [ 28.8669, -30.3087, -29.9741,  34.6459],
        [ 12.2842, -12.9601, -14.7222,  16.8709],
        [  7.2581,  -7.7903, -11.2151,  12.8874],
        [ 15.8080, -16.9220, -26.8755,  30.1474],
        [ 14.3521, -15.3875, -19.3083,  21.5535],
        [ 10.7837, -10.9385, -13.8679,  16.1604],
        [ 19.0867, -19.2484, -30.5939,  35.7026],
        [  5.7274,  -5.5656,  -8.2634,   9.3594],
        [ 25.9580, -25.9566, -37.8871,  43.1568],
        [  3.4244,  -3.9000,  -6.4991,   7.6130],
        [ 13.2868, -13.7926, -22.7167,  26.3694],
        [ 12.6176, -13.3588, -16.7027,  18.8079],
        [ -2.6932,   2.1472,   0.7766,  -0.1004],
        [ 20.0839, -19.9204, -23.1516,  26.8667],
        [ 16.7512, -17.0687, -19.3395,  22.4816],
        [ 29.3012, -30.1560, -33.1023,  38.7510],
        [ 12.7526, -13.1683,  -9.6822,  12.0019],
        [ 12.2448, -12.8161, -14.8569,  17.3565],
        [ 38.8020, -39.6981, -40.1341,  47.3869],
        [ 11.1211, -11.7467, -13.0154,  14.2794],
        [-21.0374,  17.0285,  11.0051,  -6.3740],
        [  6.0210,  -6.2062,  -9.4116,  11.2440],
        [  9.7296, -10.0355, -12.6201,  13.9812],
        [  6.2839,  -6.1729, -11.2384,  13.6144],
        [ 11.0469, -11.8367, -15.6328,  17.2279],
        [  0.6765,  -0.9030,  -3.2019,   4.7569],
        [  7.0542,  -6.5586, -19.9195,  23.0740],
        [ 22.7533, -23.1160, -34.7432,  39.3356],
        [ 10.6360, -11.9385, -11.4599,  14.5634],
        [  4.0178,  -4.0503,  -7.2102,   7.9081],
        [ 24.0155, -24.9918, -27.2254,  31.3250],
        [ 10.1282, -11.0806, -11.9383,  13.7540],
        [  9.7400, -10.5685, -13.5823,  15.3624]]), (torch.tensor([0.9738, 0.9992, 0.5087, 0.9998, 0.9883, 0.9977, 0.9770, 0.2183, 0.9948,
        0.9656, 0.4381, 0.9925, 0.6010, 0.9723, 0.1651, 0.9879, 0.9924, 0.9876,
        0.9968, 0.9349, 0.9947, 0.4387, 0.9927, 0.9942, 0.4349, 0.9486, 0.9942,
        0.4387, 0.9486, 0.9942, 0.1628, 0.7761, 0.1628, 0.7761, 0.9985, 0.9907,
        0.9508, 0.5689, 0.8793, 1.0000, 0.6771, 0.9984, 0.9810, 0.7727, 0.6646,
        0.8051, 0.8051, 0.8051, 0.6646, 0.8051, 0.6646, 0.2769, 0.9668, 0.9932,
        0.9816, 0.7989, 0.1631, 0.9955, 0.8438, 0.6856, 0.1064, 0.6856, 0.9752,
        0.3741, 0.9931, 0.9175, 0.0910, 0.9717, 0.3922, 0.9939, 0.8705, 0.9981,
        0.9776, 0.6507, 0.9635, 0.9589, 0.9985, 0.9986, 0.9602, 0.4472, 0.9986,
        0.9714, 0.4344, 0.9799, 0.9929, 0.9844, 0.9819, 0.7700, 0.9840, 0.9882,
        0.9840, 0.9804, 0.4177, 0.9713, 0.1901, 0.2072, 0.9929, 0.5218, 0.9822,
        0.9995, 0.8334, 0.3516, 0.9944, 0.9940, 0.9779, 0.9486, 0.9912, 0.9646,
        0.4528, 0.9927, 0.8271, 0.4849, 0.9883, 0.9217, 0.9931, 0.9986, 0.9933,
        0.4126, 0.9923, 0.9852, 0.9588, 0.4514, 0.2169, 0.9980, 0.4514, 0.9984,
        0.9978, 0.4416, 0.9670, 0.3988, 0.9976, 0.9929, 0.9421, 0.4566, 0.1968,
        0.9773, 0.1968, 0.6792, 0.9992, 0.9975, 0.9610, 0.9989, 0.4508, 0.9691,
        0.9719, 0.9989, 0.2138, 0.4042, 0.9613, 0.9938, 0.9934, 1.0000, 0.6084,
        0.9956, 0.9986, 0.6084, 0.4661, 0.9769, 0.7519, 0.4750, 1.0000, 0.9835,
        0.9979, 0.4785, 0.4785, 1.0000, 0.6469, 0.9963, 0.9986, 0.4720, 0.9882,
        0.9929, 0.9864, 0.6919, 0.9577, 0.6919, 0.9574, 0.4469, 0.9899, 0.4927,
        0.9574, 0.4469, 0.9899, 0.4927, 0.3578, 0.9655, 0.3774, 0.9776, 0.0691,
        0.9655, 0.1727, 0.9655, 0.1727, 0.9776, 0.3774, 0.9655, 0.3578, 0.9600,
        0.9600, 0.9600, 0.9991, 0.9258, 0.9950, 0.9690, 0.0885, 0.6760, 0.6760,
        0.9927, 0.9704, 0.1169, 0.9342, 0.3177, 0.9342, 0.1169, 0.9704, 1.0000,
        0.9412, 0.9872, 0.9878, 0.9274, 0.9837, 0.9909, 0.9911, 0.4346, 0.9590,
        0.9935, 0.9935, 0.9993, 0.8243, 0.9815, 0.9650, 0.9169, 0.9925, 0.1860,
        0.4161, 0.9628, 0.9935, 0.9252, 0.9964, 0.1067, 0.9718, 0.9976, 0.9946,
        0.9511, 0.1989, 0.6698, 0.9930, 0.9976, 0.9622, 0.4532, 0.9668, 0.9724,
        0.9848, 0.4297, 0.9969, 0.8262, 0.9401, 0.2219, 0.9898, 0.8570, 0.9871,
        0.5544, 0.9976, 0.5544, 0.5908, 0.9812, 0.9978, 0.9787, 0.3995, 0.9610,
        0.9992, 0.6661, 0.1723, 0.9886, 0.9834, 0.9800, 0.9839, 0.4448, 0.9877,
        0.3770, 0.6387, 0.9964, 0.9525, 0.4430, 0.9936, 0.9952, 0.4430, 0.9955,
        0.8337, 0.8890, 0.8090, 0.6503, 0.1350, 0.6503, 0.9689, 0.4049, 0.9660,
        0.9870, 0.9943, 0.9651, 1.0000, 1.0000, 0.9566, 0.9749, 0.9952, 1.0000,
        0.9991, 0.9986, 0.5715, 0.9936, 0.9533, 0.9930, 0.9947, 0.4254, 0.2156,
        0.9706, 0.9037, 0.9989, 0.9591, 0.9988, 0.9899, 0.1671, 0.9948, 0.9940,
        0.8720, 0.4380, 0.9981, 0.7147, 0.2567, 0.7147, 0.9811, 0.9398, 0.9621,
        0.0805, 0.9621, 0.9550, 0.9958, 0.9989, 1.0000, 0.9308, 0.2267, 0.8085,
        0.2267, 0.8085, 0.9996, 0.9659, 0.4112, 0.9616, 1.0000, 1.0000, 0.6584,
        0.9981, 0.8174, 0.9731, 0.1588, 0.9796, 0.9983, 0.9781, 0.9985, 1.0000,
        1.0000, 0.9996, 0.9681, 1.0000, 0.9939, 0.3939, 0.9261, 0.9918, 0.9854,
        0.7327, 0.9997, 0.9674, 0.4268, 0.9927, 0.9975, 0.4369, 0.9918, 0.9812,
        0.1674, 0.9932, 0.9613, 0.9932, 0.9526, 0.4292, 0.9938, 0.8690, 0.9840,
        0.9925, 0.4390, 0.9900, 0.6652, 0.1604, 0.9910, 0.9917, 0.9995, 0.4583,
        0.9985, 0.9968, 0.8405, 0.8405, 0.9829, 0.9966, 0.9969, 0.4631, 0.9998,
        0.5393, 0.5393, 0.5393, 0.5393, 1.0000, 0.9970, 0.9670, 0.4149, 0.9334,
        0.9061, 0.9838, 0.9198, 0.3967, 0.9685, 0.9938, 0.2427, 0.9576, 0.9835,
        0.9561, 0.9561, 0.9561, 0.8223, 0.2113, 0.9272, 0.9989, 0.9850, 0.9958,
        0.4304, 0.9877, 0.9900, 0.9883, 0.9805, 0.9883, 0.9900, 0.6769, 0.0504,
        0.6769, 0.9699, 0.4370, 0.9902, 0.4370, 0.9699, 0.0504, 0.6769, 0.6769,
        0.2114, 0.9945, 0.2114, 0.9945, 0.9935, 0.8305, 0.2123, 0.8305, 0.9724,
        0.9828, 0.9981, 0.7872, 0.1912, 0.9801, 0.9472, 0.9851, 1.0000, 0.9828,
        0.9946, 0.8481, 0.1004, 0.9885, 0.9894, 0.9963, 0.9548, 0.9963, 0.4442,
        0.9916, 0.8815, 0.3601, 0.8801, 0.3708, 0.9946, 0.4108, 0.9576, 0.9957,
        0.6198, 0.9959, 0.9993, 0.9185, 0.5569, 0.9571, 0.5569, 0.5569, 0.9944,
        0.9838, 0.9114, 0.9920, 0.4247, 0.9976, 0.9668, 0.4458, 0.9963, 0.9931,
        0.4075, 0.4303, 0.9822, 0.9967, 0.7871, 0.3647, 0.9751, 0.5401, 0.3975,
        0.9747, 0.8426, 0.9996, 0.9653, 0.6912, 0.9724, 0.9887, 0.4801, 0.2122,
        0.9873, 0.2122, 0.9675, 0.9884, 0.8744, 0.9987, 0.9987, 1.0000, 1.0000,
        0.9398, 0.4445, 0.9881, 0.4214, 0.9888, 0.9232, 0.9964, 0.4413, 0.9397,
        0.9875, 0.8453, 0.9847, 0.9974, 0.4919, 0.7862, 0.6653, 0.2735, 0.9934,
        0.2735, 0.6653, 0.2735, 0.6653, 0.2735, 0.6653, 0.9823, 0.9969, 0.4848,
        0.9865, 0.3765, 1.0000, 0.9749, 0.9983, 0.9607, 0.1869, 0.9687, 0.9031,
        0.9905, 1.0000, 0.6260, 0.1582, 0.9982, 0.9896, 0.0952, 0.9836, 0.9958,
        0.8334, 0.9936, 0.9604, 0.9946, 0.3469, 0.2149, 0.9972, 0.9726, 0.1741,
        0.9980, 0.4247, 0.2185, 0.9904, 0.9645, 0.1451, 0.9873, 0.1741, 0.6513,
        0.9980, 0.7497, 0.9741, 0.0774, 0.9608, 0.1775, 0.9608, 0.1775, 0.9741,
        0.7497, 0.9616, 0.9616, 0.9616, 0.6037, 0.9629, 0.1819, 0.2168, 0.9951,
        0.9965, 0.9996, 0.9954, 0.5167, 0.5167, 0.5167, 0.5167, 0.9898, 0.4513,
        0.9728, 0.4513, 0.9898, 0.9996, 0.9954, 0.5167, 0.5167, 0.5167, 0.5167,
        0.9715, 0.9807, 0.9290, 0.6110, 0.4723, 0.9504, 0.6629, 0.0875, 0.9704,
        0.9936, 0.9241, 0.9825, 0.9302, 0.9878, 0.7444, 0.3826, 0.9983, 0.9839,
        0.9948, 0.9673, 0.6934, 0.2261, 0.6934, 0.9501, 0.9930, 0.7555, 0.1543,
        0.9999, 0.9495, 0.9652, 0.9976, 0.3572, 0.7352, 0.9187, 0.1665, 0.2006,
        0.8660, 0.2006, 0.8660, 0.2006, 0.8660, 0.2006, 0.8660, 1.0000, 0.9958,
        0.9887, 0.9776, 0.8183, 0.9943, 0.9937, 0.9331, 1.0000],
       ), torch.tensor([[  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,
         14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,
         28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,  39,  40,  41,
         42,  43,  44,  45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,
         56,  57,  58,  59,  60,  61,  62,  63,  64,  65,  66,  67,  68,  69,
         70,  71,  72,  73,  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,
         84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,
         98,  99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
        112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
        126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,
        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153,
        154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167,
        168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
        182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195,
        196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209,
        210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223,
        224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237,
        238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
        252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
        266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
        280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293,
        294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307,
        308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
        322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335,
        336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349,
        350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363,
        364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377,
        378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391,
        392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405,
        406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419,
        420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433,
        434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447,
        448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461,
        462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475,
        476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489,
        490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503,
        504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517,
        518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531,
        532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545,
        546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559,
        560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573,
        574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587,
        588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601,
        602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615,
        616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629,
        630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643,
        644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657,
        658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671,
        672, 673, 674, 675, 676, 677, 678, 679, 680, 681],
        [  0,   0,   0,   1,   1,   1,   2,   2,   2,   2,   2,   2,   3,   3,
          3,   3,   3,   3,   4,   4,   5,   5,   5,   5,   5,   5,   5,   5,
          5,   5,   5,   5,   5,   5,   6,   6,   6,   6,   6,   7,   8,   8,
          8,   8,   8,   8,   8,   8,   8,   8,   9,   9,   9,   9,   9,  10,
         10,  10,  10,  11,  11,  11,  11,  11,  11,  12,  12,  12,  12,  12,
         13,  13,  13,  14,  14,  14,  14,  14,  14,  14,  14,  15,  15,  15,
         15,  15,  16,  16,  16,  16,  16,  17,  17,  17,  17,  17,  17,  17,
         17,  18,  18,  18,  18,  19,  19,  20,  20,  20,  20,  20,  20,  21,
         21,  21,  21,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  23,
         24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  25,  26,  26,
         26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  28,  29,  29,
         29,  29,  30,  30,  30,  30,  31,  32,  32,  32,  32,  33,  34,  34,
         34,  35,  35,  35,  35,  36,  36,  36,  36,  36,  36,  36,  36,  36,
         36,  36,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,
         37,  37,  37,  37,  38,  38,  39,  39,  39,  39,  39,  39,  40,  40,
         40,  40,  40,  40,  40,  41,  42,  42,  42,  42,  42,  42,  43,  43,
         43,  43,  43,  44,  44,  45,  45,  45,  46,  46,  46,  46,  46,  47,
         47,  47,  47,  47,  48,  48,  48,  48,  49,  49,  49,  49,  49,  49,
         50,  50,  50,  50,  51,  51,  51,  51,  52,  52,  52,  52,  53,  53,
         53,  54,  54,  54,  54,  55,  55,  55,  55,  55,  55,  55,  55,  55,
         56,  56,  56,  56,  56,  56,  56,  56,  56,  57,  57,  58,  58,  58,
         58,  58,  58,  58,  58,  58,  59,  60,  61,  61,  61,  62,  63,  63,
         64,  64,  64,  64,  64,  64,  64,  64,  64,  65,  65,  65,  66,  66,
         66,  67,  67,  67,  67,  68,  68,  68,  68,  68,  69,  69,  69,  69,
         69,  69,  70,  71,  71,  71,  71,  71,  72,  72,  72,  72,  73,  74,
         75,  75,  75,  76,  76,  76,  76,  77,  77,  78,  79,  80,  80,  81,
         82,  82,  82,  83,  83,  84,  84,  85,  85,  85,  86,  86,  86,  87,
         87,  87,  87,  87,  87,  87,  87,  87,  87,  87,  87,  87,  88,  88,
         88,  88,  89,  89,  89,  90,  90,  90,  91,  91,  91,  91,  92,  92,
         92,  92,  92,  93,  94,  94,  94,  94,  95,  95,  95,  95,  95,  95,
         95,  96,  96,  96,  96,  96,  97,  97,  97,  97,  98,  98,  98,  98,
         99,  99,  99,  99,  99, 100, 100, 100, 100, 100, 100, 100, 100, 100,
        100, 100, 100, 100, 100, 100, 101, 101, 101, 101, 102, 102, 102, 103,
        103, 103, 103, 103, 104, 105, 105, 105, 105, 105, 105, 106, 106, 106,
        106, 106, 107, 107, 107, 107, 107, 108, 108, 108, 109, 109, 110, 110,
        110, 110, 110, 110, 111, 111, 112, 112, 112, 113, 113, 113, 113, 113,
        113, 113, 113, 113, 114, 114, 114, 114, 114, 114, 114, 115, 115, 116,
        116, 116, 116, 116, 116, 116, 116, 116, 117, 117, 117, 118, 119, 120,
        120, 120, 120, 120, 120, 121, 121, 121, 121, 121, 122, 122, 122, 122,
        123, 123, 123, 123, 123, 123, 123, 123, 123, 124, 124, 124, 124, 124,
        125, 126, 126, 127, 127, 127, 127, 127, 128, 129, 129, 129, 129, 129,
        129, 129, 129, 130, 130, 130, 130, 130, 130, 131, 131, 131, 131, 131,
        131, 131, 131, 131, 131, 131, 131, 132, 132, 132, 132, 132, 132, 132,
        132, 132, 132, 132, 132, 133, 133, 133, 133, 133, 133, 134, 134, 134,
        134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
        135, 135, 135, 136, 136, 136, 137, 137, 137, 137, 138, 138, 138, 138,
        139, 139, 139, 139, 140, 140, 141, 141, 141, 141, 141, 142, 142, 142,
        143, 143, 143, 143, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
        144, 145, 146, 146, 146, 146, 147, 147, 147, 148]])))

#Get pred
pred = np.argmax(output[0][:,2:4].detach().numpy(), axis=1)
att = output[1][0].detach().numpy()
cross = output[1][1].detach().numpy()
idx = cross[1]
#Get one data
test_id = [805, 308, 351, 595, 284, 951, 404, 55, 1067, 1338, 842, 1082, 1175, 495, 729, 554, 1402, 1242, 515, 277, 909, 1451, 285, 877, 1016, 639, 185, 197, 472, 1354, 1457, 740, 438, 312, 1142, 1420, 1364, 1458, 532, 985, 51, 1243, 492, 550, 977, 380, 944, 779, 420, 947, 987, 786, 1027, 584, 1050, 761, 1299, 686, 1286, 10, 58, 1394, 28, 927, 690, 265, 1249, 247, 1283, 1198, 57, 1101, 184, 1359, 1038, 1290, 1206, 620, 237, 72, 445, 470, 1005, 139, 857, 1029, 1148, 1253, 1325, 160, 148, 1204, 558, 363, 183, 1163, 790, 848, 560, 201, 1075, 528, 974, 666, 126, 392, 254, 1256, 645, 765, 958, 335, 781, 929, 815, 449, 708, 691, 320, 467, 1036, 870, 522, 1339, 521, 136, 618, 699, 1352, 1309, 156, 1248, 1406, 591, 566, 366, 1219, 712, 368, 816, 375, 1281, 831, 660, 1341, 27, 162, 950, 221]
p = test_id.index(1402)
i = 2
df = pd.read_csv('E:/3-Code/Jupternote book/HiGNN_clintox/raw/clintox.csv')
df_test = df.iloc[test_id]
print(df_test)
df_test.iloc[i]
num = np.where(idx==i)[0]
smiles = df_test['smiles'].iloc[i]
mol = Chem.MolFromSmiles(smiles)

#----------------------------------------
#Plot
#----------------------------------------
drawer = rdMolDraw2D.MolDraw2DSVG(300,300)
drawer.drawOptions().addAtomIndices = True
drawer.drawOptions().addBondIndices = True
drawer.DrawMolecule(mol)
drawer.FinishDrawing()
#画整个分子图
SVG(drawer.GetDrawingText())

#----------------------------------------
#BRICS
#----------------------------------------
results = np.array(sorted(list(FindBRICSBonds(mol))), dtype=np.long)
bond_to_break = results[:, 0, :]
bond_to_break = bond_to_break.tolist()
with Chem.RWMol(mol) as rwmol:
    for i in bond_to_break:
        rwmol.RemoveBond(*i)
rwmol = rwmol.GetMol()
s = Chem.MolToSmiles(rwmol)
print(s)
cluster_idx = []
Chem.rdmolops.GetMolFrags(rwmol, asMols=True, sanitizeFrags=False, frags=cluster_idx)


atoms = mol.GetAtoms()
hit_ats = list(range(0, len(atoms)))
weight_atom = att[num][cluster_idx]
print(att[num])
#归一化
weight_atom = (weight_atom - weight_atom.min())/(weight_atom.max() - weight_atom.min())
print(weight_atom)

hit_bonds = []
weight_bond = []


#----------------------------------------
#Calculate the weights
#----------------------------------------
# 假设 mol 是一个有效的分子对象，hit_ats 是包含原子索引的列表，weight_atom 是包含原子权重的列表
for bond in mol.GetBonds():
    # 获取键连接的两个原子的索引
    aid1 = bond.GetBeginAtomIdx()
    aid2 = bond.GetEndAtomIdx()

    # 检查这两个原子是否在 hit_ats 列表中
    if aid1 in hit_ats and aid2 in hit_ats:
        # 获取键的索引
        bond_idx = bond.GetIdx()
        hit_bonds.append(bond_idx)

        # 计算键的权重
        # 假设 weight_atom 是一个字典，键是原子索引，值是权重
        if weight_atom[aid1]:
            weight1 = weight_atom[aid1]  # 使用 get 方法避免 KeyError，如果找不到则返回 None
        else:
            weight1 = None
        if weight_atom[aid2]:
            weight2 = weight_atom[aid2]  # 使用 get 方法避免 KeyError，如果找不到则返回 None
        else:
            weight2 = None

            # 检查两个权重是否都有定义且相等
        if weight1 is not None and weight2 is not None and weight1 == weight2:
            weight_bond.append(weight1)
        else:
            weight_bond.append(0)  # 如果权重不相等或未定义，则权重为 0
    # 如果至少有一个原子不在 hit_ats 中，则忽略这个键
norm = matplotlib.colors.Normalize(vmin=0, vmax=1.5)
cmap = cm.get_cmap('Reds')
plt_colors = cm.ScalarMappable(norm=norm, cmap=cmap)

atom_cols = {}
for at in hit_ats:
    atom_cols[at] = plt_colors.to_rgba(float(weight_atom[at]))

bond_cols = {}
for bd in hit_bonds:
    bond_cols[bd] = plt_colors.to_rgba(float(weight_bond[bd]))

d = rdMolDraw2D.MolDraw2DSVG(500, 500) # or MolDraw2DCairo to get PNGs
rdMolDraw2D.PrepareAndDrawMolecule(d, mol, highlightAtoms=hit_ats,
                                   highlightBonds=hit_bonds,
                                  highlightAtomColors=atom_cols,
                                  highlightBondColors=bond_cols)
#d.DrawMolecule(mol)
d.FinishDrawing()
SVG(d.GetDrawingText())